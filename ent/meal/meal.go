// Code generated by ent, DO NOT EDIT.

package meal

import (
	"time"
)

const (
	// Label holds the string label denoting the meal type in the database.
	Label = "meal"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldMealType holds the string denoting the meal_type field in the database.
	FieldMealType = "meal_type"
	// FieldImageURL holds the string denoting the image_url field in the database.
	FieldImageURL = "image_url"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// Table holds the table name of the meal in the database.
	Table = "meals"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "meals"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_meals"
)

// Columns holds all SQL columns for meal fields.
var Columns = []string{
	FieldID,
	FieldMealType,
	FieldImageURL,
	FieldCreatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "meals"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_meals",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// MealTypeValidator is a validator for the "meal_type" field. It is called by the builders before save.
	MealTypeValidator func(string) error
	// DefaultImageURL holds the default value on creation for the "image_url" field.
	DefaultImageURL string
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt time.Time
)
