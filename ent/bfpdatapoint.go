// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/khang00/health/ent/bfpdatapoint"
	"github.com/khang00/health/ent/user"
)

// BFPDataPoint is the model entity for the BFPDataPoint schema.
type BFPDataPoint struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// FatPercentage holds the value of the "fat_percentage" field.
	FatPercentage float64 `json:"fat_percentage,omitempty"`
	// TotalWeight holds the value of the "total_weight" field.
	TotalWeight int `json:"total_weight,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BFPDataPointQuery when eager-loading is set.
	Edges      BFPDataPointEdges `json:"edges"`
	user_bf_ps *int
}

// BFPDataPointEdges holds the relations/edges for other nodes in the graph.
type BFPDataPointEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BFPDataPointEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BFPDataPoint) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case bfpdatapoint.FieldFatPercentage:
			values[i] = new(sql.NullFloat64)
		case bfpdatapoint.FieldID, bfpdatapoint.FieldTotalWeight:
			values[i] = new(sql.NullInt64)
		case bfpdatapoint.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case bfpdatapoint.ForeignKeys[0]: // user_bf_ps
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type BFPDataPoint", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BFPDataPoint fields.
func (bdp *BFPDataPoint) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case bfpdatapoint.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			bdp.ID = int(value.Int64)
		case bfpdatapoint.FieldFatPercentage:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field fat_percentage", values[i])
			} else if value.Valid {
				bdp.FatPercentage = value.Float64
			}
		case bfpdatapoint.FieldTotalWeight:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field total_weight", values[i])
			} else if value.Valid {
				bdp.TotalWeight = int(value.Int64)
			}
		case bfpdatapoint.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				bdp.CreatedAt = value.Time
			}
		case bfpdatapoint.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_bf_ps", value)
			} else if value.Valid {
				bdp.user_bf_ps = new(int)
				*bdp.user_bf_ps = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the BFPDataPoint entity.
func (bdp *BFPDataPoint) QueryUser() *UserQuery {
	return NewBFPDataPointClient(bdp.config).QueryUser(bdp)
}

// Update returns a builder for updating this BFPDataPoint.
// Note that you need to call BFPDataPoint.Unwrap() before calling this method if this BFPDataPoint
// was returned from a transaction, and the transaction was committed or rolled back.
func (bdp *BFPDataPoint) Update() *BFPDataPointUpdateOne {
	return NewBFPDataPointClient(bdp.config).UpdateOne(bdp)
}

// Unwrap unwraps the BFPDataPoint entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (bdp *BFPDataPoint) Unwrap() *BFPDataPoint {
	_tx, ok := bdp.config.driver.(*txDriver)
	if !ok {
		panic("ent: BFPDataPoint is not a transactional entity")
	}
	bdp.config.driver = _tx.drv
	return bdp
}

// String implements the fmt.Stringer.
func (bdp *BFPDataPoint) String() string {
	var builder strings.Builder
	builder.WriteString("BFPDataPoint(")
	builder.WriteString(fmt.Sprintf("id=%v, ", bdp.ID))
	builder.WriteString("fat_percentage=")
	builder.WriteString(fmt.Sprintf("%v", bdp.FatPercentage))
	builder.WriteString(", ")
	builder.WriteString("total_weight=")
	builder.WriteString(fmt.Sprintf("%v", bdp.TotalWeight))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(bdp.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// BFPDataPoints is a parsable slice of BFPDataPoint.
type BFPDataPoints []*BFPDataPoint
