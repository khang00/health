// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/khang00/health/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/khang00/health/ent/achievement"
	"github.com/khang00/health/ent/bfpdatapoint"
	"github.com/khang00/health/ent/meal"
	"github.com/khang00/health/ent/user"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Achievement is the client for interacting with the Achievement builders.
	Achievement *AchievementClient
	// BFPDataPoint is the client for interacting with the BFPDataPoint builders.
	BFPDataPoint *BFPDataPointClient
	// Meal is the client for interacting with the Meal builders.
	Meal *MealClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Achievement = NewAchievementClient(c.config)
	c.BFPDataPoint = NewBFPDataPointClient(c.config)
	c.Meal = NewMealClient(c.config)
	c.User = NewUserClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:          ctx,
		config:       cfg,
		Achievement:  NewAchievementClient(cfg),
		BFPDataPoint: NewBFPDataPointClient(cfg),
		Meal:         NewMealClient(cfg),
		User:         NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:          ctx,
		config:       cfg,
		Achievement:  NewAchievementClient(cfg),
		BFPDataPoint: NewBFPDataPointClient(cfg),
		Meal:         NewMealClient(cfg),
		User:         NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Achievement.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Achievement.Use(hooks...)
	c.BFPDataPoint.Use(hooks...)
	c.Meal.Use(hooks...)
	c.User.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.Achievement.Intercept(interceptors...)
	c.BFPDataPoint.Intercept(interceptors...)
	c.Meal.Intercept(interceptors...)
	c.User.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *AchievementMutation:
		return c.Achievement.mutate(ctx, m)
	case *BFPDataPointMutation:
		return c.BFPDataPoint.mutate(ctx, m)
	case *MealMutation:
		return c.Meal.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// AchievementClient is a client for the Achievement schema.
type AchievementClient struct {
	config
}

// NewAchievementClient returns a client for the Achievement from the given config.
func NewAchievementClient(c config) *AchievementClient {
	return &AchievementClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `achievement.Hooks(f(g(h())))`.
func (c *AchievementClient) Use(hooks ...Hook) {
	c.hooks.Achievement = append(c.hooks.Achievement, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `achievement.Intercept(f(g(h())))`.
func (c *AchievementClient) Intercept(interceptors ...Interceptor) {
	c.inters.Achievement = append(c.inters.Achievement, interceptors...)
}

// Create returns a builder for creating a Achievement entity.
func (c *AchievementClient) Create() *AchievementCreate {
	mutation := newAchievementMutation(c.config, OpCreate)
	return &AchievementCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Achievement entities.
func (c *AchievementClient) CreateBulk(builders ...*AchievementCreate) *AchievementCreateBulk {
	return &AchievementCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Achievement.
func (c *AchievementClient) Update() *AchievementUpdate {
	mutation := newAchievementMutation(c.config, OpUpdate)
	return &AchievementUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AchievementClient) UpdateOne(a *Achievement) *AchievementUpdateOne {
	mutation := newAchievementMutation(c.config, OpUpdateOne, withAchievement(a))
	return &AchievementUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AchievementClient) UpdateOneID(id int) *AchievementUpdateOne {
	mutation := newAchievementMutation(c.config, OpUpdateOne, withAchievementID(id))
	return &AchievementUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Achievement.
func (c *AchievementClient) Delete() *AchievementDelete {
	mutation := newAchievementMutation(c.config, OpDelete)
	return &AchievementDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AchievementClient) DeleteOne(a *Achievement) *AchievementDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AchievementClient) DeleteOneID(id int) *AchievementDeleteOne {
	builder := c.Delete().Where(achievement.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AchievementDeleteOne{builder}
}

// Query returns a query builder for Achievement.
func (c *AchievementClient) Query() *AchievementQuery {
	return &AchievementQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAchievement},
		inters: c.Interceptors(),
	}
}

// Get returns a Achievement entity by its id.
func (c *AchievementClient) Get(ctx context.Context, id int) (*Achievement, error) {
	return c.Query().Where(achievement.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AchievementClient) GetX(ctx context.Context, id int) *Achievement {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Achievement.
func (c *AchievementClient) QueryUser(a *Achievement) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(achievement.Table, achievement.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, achievement.UserTable, achievement.UserColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AchievementClient) Hooks() []Hook {
	return c.hooks.Achievement
}

// Interceptors returns the client interceptors.
func (c *AchievementClient) Interceptors() []Interceptor {
	return c.inters.Achievement
}

func (c *AchievementClient) mutate(ctx context.Context, m *AchievementMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AchievementCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AchievementUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AchievementUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AchievementDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Achievement mutation op: %q", m.Op())
	}
}

// BFPDataPointClient is a client for the BFPDataPoint schema.
type BFPDataPointClient struct {
	config
}

// NewBFPDataPointClient returns a client for the BFPDataPoint from the given config.
func NewBFPDataPointClient(c config) *BFPDataPointClient {
	return &BFPDataPointClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `bfpdatapoint.Hooks(f(g(h())))`.
func (c *BFPDataPointClient) Use(hooks ...Hook) {
	c.hooks.BFPDataPoint = append(c.hooks.BFPDataPoint, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `bfpdatapoint.Intercept(f(g(h())))`.
func (c *BFPDataPointClient) Intercept(interceptors ...Interceptor) {
	c.inters.BFPDataPoint = append(c.inters.BFPDataPoint, interceptors...)
}

// Create returns a builder for creating a BFPDataPoint entity.
func (c *BFPDataPointClient) Create() *BFPDataPointCreate {
	mutation := newBFPDataPointMutation(c.config, OpCreate)
	return &BFPDataPointCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of BFPDataPoint entities.
func (c *BFPDataPointClient) CreateBulk(builders ...*BFPDataPointCreate) *BFPDataPointCreateBulk {
	return &BFPDataPointCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for BFPDataPoint.
func (c *BFPDataPointClient) Update() *BFPDataPointUpdate {
	mutation := newBFPDataPointMutation(c.config, OpUpdate)
	return &BFPDataPointUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BFPDataPointClient) UpdateOne(bdp *BFPDataPoint) *BFPDataPointUpdateOne {
	mutation := newBFPDataPointMutation(c.config, OpUpdateOne, withBFPDataPoint(bdp))
	return &BFPDataPointUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BFPDataPointClient) UpdateOneID(id int) *BFPDataPointUpdateOne {
	mutation := newBFPDataPointMutation(c.config, OpUpdateOne, withBFPDataPointID(id))
	return &BFPDataPointUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BFPDataPoint.
func (c *BFPDataPointClient) Delete() *BFPDataPointDelete {
	mutation := newBFPDataPointMutation(c.config, OpDelete)
	return &BFPDataPointDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BFPDataPointClient) DeleteOne(bdp *BFPDataPoint) *BFPDataPointDeleteOne {
	return c.DeleteOneID(bdp.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BFPDataPointClient) DeleteOneID(id int) *BFPDataPointDeleteOne {
	builder := c.Delete().Where(bfpdatapoint.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BFPDataPointDeleteOne{builder}
}

// Query returns a query builder for BFPDataPoint.
func (c *BFPDataPointClient) Query() *BFPDataPointQuery {
	return &BFPDataPointQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBFPDataPoint},
		inters: c.Interceptors(),
	}
}

// Get returns a BFPDataPoint entity by its id.
func (c *BFPDataPointClient) Get(ctx context.Context, id int) (*BFPDataPoint, error) {
	return c.Query().Where(bfpdatapoint.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BFPDataPointClient) GetX(ctx context.Context, id int) *BFPDataPoint {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a BFPDataPoint.
func (c *BFPDataPointClient) QueryUser(bdp *BFPDataPoint) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bdp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(bfpdatapoint.Table, bfpdatapoint.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, bfpdatapoint.UserTable, bfpdatapoint.UserColumn),
		)
		fromV = sqlgraph.Neighbors(bdp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BFPDataPointClient) Hooks() []Hook {
	return c.hooks.BFPDataPoint
}

// Interceptors returns the client interceptors.
func (c *BFPDataPointClient) Interceptors() []Interceptor {
	return c.inters.BFPDataPoint
}

func (c *BFPDataPointClient) mutate(ctx context.Context, m *BFPDataPointMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BFPDataPointCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BFPDataPointUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BFPDataPointUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BFPDataPointDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown BFPDataPoint mutation op: %q", m.Op())
	}
}

// MealClient is a client for the Meal schema.
type MealClient struct {
	config
}

// NewMealClient returns a client for the Meal from the given config.
func NewMealClient(c config) *MealClient {
	return &MealClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `meal.Hooks(f(g(h())))`.
func (c *MealClient) Use(hooks ...Hook) {
	c.hooks.Meal = append(c.hooks.Meal, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `meal.Intercept(f(g(h())))`.
func (c *MealClient) Intercept(interceptors ...Interceptor) {
	c.inters.Meal = append(c.inters.Meal, interceptors...)
}

// Create returns a builder for creating a Meal entity.
func (c *MealClient) Create() *MealCreate {
	mutation := newMealMutation(c.config, OpCreate)
	return &MealCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Meal entities.
func (c *MealClient) CreateBulk(builders ...*MealCreate) *MealCreateBulk {
	return &MealCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Meal.
func (c *MealClient) Update() *MealUpdate {
	mutation := newMealMutation(c.config, OpUpdate)
	return &MealUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MealClient) UpdateOne(m *Meal) *MealUpdateOne {
	mutation := newMealMutation(c.config, OpUpdateOne, withMeal(m))
	return &MealUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MealClient) UpdateOneID(id int) *MealUpdateOne {
	mutation := newMealMutation(c.config, OpUpdateOne, withMealID(id))
	return &MealUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Meal.
func (c *MealClient) Delete() *MealDelete {
	mutation := newMealMutation(c.config, OpDelete)
	return &MealDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MealClient) DeleteOne(m *Meal) *MealDeleteOne {
	return c.DeleteOneID(m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MealClient) DeleteOneID(id int) *MealDeleteOne {
	builder := c.Delete().Where(meal.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MealDeleteOne{builder}
}

// Query returns a query builder for Meal.
func (c *MealClient) Query() *MealQuery {
	return &MealQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeMeal},
		inters: c.Interceptors(),
	}
}

// Get returns a Meal entity by its id.
func (c *MealClient) Get(ctx context.Context, id int) (*Meal, error) {
	return c.Query().Where(meal.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MealClient) GetX(ctx context.Context, id int) *Meal {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Meal.
func (c *MealClient) QueryUser(m *Meal) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(meal.Table, meal.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, meal.UserTable, meal.UserColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MealClient) Hooks() []Hook {
	return c.hooks.Meal
}

// Interceptors returns the client interceptors.
func (c *MealClient) Interceptors() []Interceptor {
	return c.inters.Meal
}

func (c *MealClient) mutate(ctx context.Context, m *MealMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&MealCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&MealUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&MealUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&MealDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Meal mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMeals queries the meals edge of a User.
func (c *UserClient) QueryMeals(u *User) *MealQuery {
	query := (&MealClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(meal.Table, meal.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.MealsTable, user.MealsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBFPs queries the BFPs edge of a User.
func (c *UserClient) QueryBFPs(u *User) *BFPDataPointQuery {
	query := (&BFPDataPointClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(bfpdatapoint.Table, bfpdatapoint.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.BFPsTable, user.BFPsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAchievements queries the achievements edge of a User.
func (c *UserClient) QueryAchievements(u *User) *AchievementQuery {
	query := (&AchievementClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(achievement.Table, achievement.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.AchievementsTable, user.AchievementsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Achievement, BFPDataPoint, Meal, User []ent.Hook
	}
	inters struct {
		Achievement, BFPDataPoint, Meal, User []ent.Interceptor
	}
)
