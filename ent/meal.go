// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/khang00/health/ent/meal"
	"github.com/khang00/health/ent/user"
)

// Meal is the model entity for the Meal schema.
type Meal struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// MealType holds the value of the "meal_type" field.
	MealType string `json:"meal_type,omitempty"`
	// ImageURL holds the value of the "image_url" field.
	ImageURL string `json:"image_url,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MealQuery when eager-loading is set.
	Edges      MealEdges `json:"edges"`
	user_meals *int
}

// MealEdges holds the relations/edges for other nodes in the graph.
type MealEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MealEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Meal) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case meal.FieldID:
			values[i] = new(sql.NullInt64)
		case meal.FieldMealType, meal.FieldImageURL:
			values[i] = new(sql.NullString)
		case meal.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case meal.ForeignKeys[0]: // user_meals
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Meal", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Meal fields.
func (m *Meal) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case meal.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			m.ID = int(value.Int64)
		case meal.FieldMealType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field meal_type", values[i])
			} else if value.Valid {
				m.MealType = value.String
			}
		case meal.FieldImageURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field image_url", values[i])
			} else if value.Valid {
				m.ImageURL = value.String
			}
		case meal.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				m.CreatedAt = value.Time
			}
		case meal.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_meals", value)
			} else if value.Valid {
				m.user_meals = new(int)
				*m.user_meals = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the Meal entity.
func (m *Meal) QueryUser() *UserQuery {
	return NewMealClient(m.config).QueryUser(m)
}

// Update returns a builder for updating this Meal.
// Note that you need to call Meal.Unwrap() before calling this method if this Meal
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Meal) Update() *MealUpdateOne {
	return NewMealClient(m.config).UpdateOne(m)
}

// Unwrap unwraps the Meal entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Meal) Unwrap() *Meal {
	_tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Meal is not a transactional entity")
	}
	m.config.driver = _tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Meal) String() string {
	var builder strings.Builder
	builder.WriteString("Meal(")
	builder.WriteString(fmt.Sprintf("id=%v, ", m.ID))
	builder.WriteString("meal_type=")
	builder.WriteString(m.MealType)
	builder.WriteString(", ")
	builder.WriteString("image_url=")
	builder.WriteString(m.ImageURL)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(m.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Meals is a parsable slice of Meal.
type Meals []*Meal
