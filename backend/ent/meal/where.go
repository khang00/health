// Code generated by ent, DO NOT EDIT.

package meal

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/khang00/health/backend/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Meal {
	return predicate.Meal(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Meal {
	return predicate.Meal(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Meal {
	return predicate.Meal(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Meal {
	return predicate.Meal(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Meal {
	return predicate.Meal(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Meal {
	return predicate.Meal(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Meal {
	return predicate.Meal(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Meal {
	return predicate.Meal(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Meal {
	return predicate.Meal(sql.FieldLTE(FieldID, id))
}

// MealType applies equality check predicate on the "meal_type" field. It's identical to MealTypeEQ.
func MealType(v string) predicate.Meal {
	return predicate.Meal(sql.FieldEQ(FieldMealType, v))
}

// ImageURL applies equality check predicate on the "image_url" field. It's identical to ImageURLEQ.
func ImageURL(v string) predicate.Meal {
	return predicate.Meal(sql.FieldEQ(FieldImageURL, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Meal {
	return predicate.Meal(sql.FieldEQ(FieldCreatedAt, v))
}

// MealTypeEQ applies the EQ predicate on the "meal_type" field.
func MealTypeEQ(v string) predicate.Meal {
	return predicate.Meal(sql.FieldEQ(FieldMealType, v))
}

// MealTypeNEQ applies the NEQ predicate on the "meal_type" field.
func MealTypeNEQ(v string) predicate.Meal {
	return predicate.Meal(sql.FieldNEQ(FieldMealType, v))
}

// MealTypeIn applies the In predicate on the "meal_type" field.
func MealTypeIn(vs ...string) predicate.Meal {
	return predicate.Meal(sql.FieldIn(FieldMealType, vs...))
}

// MealTypeNotIn applies the NotIn predicate on the "meal_type" field.
func MealTypeNotIn(vs ...string) predicate.Meal {
	return predicate.Meal(sql.FieldNotIn(FieldMealType, vs...))
}

// MealTypeGT applies the GT predicate on the "meal_type" field.
func MealTypeGT(v string) predicate.Meal {
	return predicate.Meal(sql.FieldGT(FieldMealType, v))
}

// MealTypeGTE applies the GTE predicate on the "meal_type" field.
func MealTypeGTE(v string) predicate.Meal {
	return predicate.Meal(sql.FieldGTE(FieldMealType, v))
}

// MealTypeLT applies the LT predicate on the "meal_type" field.
func MealTypeLT(v string) predicate.Meal {
	return predicate.Meal(sql.FieldLT(FieldMealType, v))
}

// MealTypeLTE applies the LTE predicate on the "meal_type" field.
func MealTypeLTE(v string) predicate.Meal {
	return predicate.Meal(sql.FieldLTE(FieldMealType, v))
}

// MealTypeContains applies the Contains predicate on the "meal_type" field.
func MealTypeContains(v string) predicate.Meal {
	return predicate.Meal(sql.FieldContains(FieldMealType, v))
}

// MealTypeHasPrefix applies the HasPrefix predicate on the "meal_type" field.
func MealTypeHasPrefix(v string) predicate.Meal {
	return predicate.Meal(sql.FieldHasPrefix(FieldMealType, v))
}

// MealTypeHasSuffix applies the HasSuffix predicate on the "meal_type" field.
func MealTypeHasSuffix(v string) predicate.Meal {
	return predicate.Meal(sql.FieldHasSuffix(FieldMealType, v))
}

// MealTypeEqualFold applies the EqualFold predicate on the "meal_type" field.
func MealTypeEqualFold(v string) predicate.Meal {
	return predicate.Meal(sql.FieldEqualFold(FieldMealType, v))
}

// MealTypeContainsFold applies the ContainsFold predicate on the "meal_type" field.
func MealTypeContainsFold(v string) predicate.Meal {
	return predicate.Meal(sql.FieldContainsFold(FieldMealType, v))
}

// ImageURLEQ applies the EQ predicate on the "image_url" field.
func ImageURLEQ(v string) predicate.Meal {
	return predicate.Meal(sql.FieldEQ(FieldImageURL, v))
}

// ImageURLNEQ applies the NEQ predicate on the "image_url" field.
func ImageURLNEQ(v string) predicate.Meal {
	return predicate.Meal(sql.FieldNEQ(FieldImageURL, v))
}

// ImageURLIn applies the In predicate on the "image_url" field.
func ImageURLIn(vs ...string) predicate.Meal {
	return predicate.Meal(sql.FieldIn(FieldImageURL, vs...))
}

// ImageURLNotIn applies the NotIn predicate on the "image_url" field.
func ImageURLNotIn(vs ...string) predicate.Meal {
	return predicate.Meal(sql.FieldNotIn(FieldImageURL, vs...))
}

// ImageURLGT applies the GT predicate on the "image_url" field.
func ImageURLGT(v string) predicate.Meal {
	return predicate.Meal(sql.FieldGT(FieldImageURL, v))
}

// ImageURLGTE applies the GTE predicate on the "image_url" field.
func ImageURLGTE(v string) predicate.Meal {
	return predicate.Meal(sql.FieldGTE(FieldImageURL, v))
}

// ImageURLLT applies the LT predicate on the "image_url" field.
func ImageURLLT(v string) predicate.Meal {
	return predicate.Meal(sql.FieldLT(FieldImageURL, v))
}

// ImageURLLTE applies the LTE predicate on the "image_url" field.
func ImageURLLTE(v string) predicate.Meal {
	return predicate.Meal(sql.FieldLTE(FieldImageURL, v))
}

// ImageURLContains applies the Contains predicate on the "image_url" field.
func ImageURLContains(v string) predicate.Meal {
	return predicate.Meal(sql.FieldContains(FieldImageURL, v))
}

// ImageURLHasPrefix applies the HasPrefix predicate on the "image_url" field.
func ImageURLHasPrefix(v string) predicate.Meal {
	return predicate.Meal(sql.FieldHasPrefix(FieldImageURL, v))
}

// ImageURLHasSuffix applies the HasSuffix predicate on the "image_url" field.
func ImageURLHasSuffix(v string) predicate.Meal {
	return predicate.Meal(sql.FieldHasSuffix(FieldImageURL, v))
}

// ImageURLEqualFold applies the EqualFold predicate on the "image_url" field.
func ImageURLEqualFold(v string) predicate.Meal {
	return predicate.Meal(sql.FieldEqualFold(FieldImageURL, v))
}

// ImageURLContainsFold applies the ContainsFold predicate on the "image_url" field.
func ImageURLContainsFold(v string) predicate.Meal {
	return predicate.Meal(sql.FieldContainsFold(FieldImageURL, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Meal {
	return predicate.Meal(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Meal {
	return predicate.Meal(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Meal {
	return predicate.Meal(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Meal {
	return predicate.Meal(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Meal {
	return predicate.Meal(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Meal {
	return predicate.Meal(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Meal {
	return predicate.Meal(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Meal {
	return predicate.Meal(sql.FieldLTE(FieldCreatedAt, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Meal {
	return predicate.Meal(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Meal {
	return predicate.Meal(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Meal) predicate.Meal {
	return predicate.Meal(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Meal) predicate.Meal {
	return predicate.Meal(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Meal) predicate.Meal {
	return predicate.Meal(func(s *sql.Selector) {
		p(s.Not())
	})
}
