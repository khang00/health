// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/khang00/health/backend/ent/meal"
	"github.com/khang00/health/backend/ent/predicate"
	"github.com/khang00/health/backend/ent/user"
)

// MealUpdate is the builder for updating Meal entities.
type MealUpdate struct {
	config
	hooks    []Hook
	mutation *MealMutation
}

// Where appends a list predicates to the MealUpdate builder.
func (mu *MealUpdate) Where(ps ...predicate.Meal) *MealUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetMealType sets the "meal_type" field.
func (mu *MealUpdate) SetMealType(s string) *MealUpdate {
	mu.mutation.SetMealType(s)
	return mu
}

// SetImageURL sets the "image_url" field.
func (mu *MealUpdate) SetImageURL(s string) *MealUpdate {
	mu.mutation.SetImageURL(s)
	return mu
}

// SetNillableImageURL sets the "image_url" field if the given value is not nil.
func (mu *MealUpdate) SetNillableImageURL(s *string) *MealUpdate {
	if s != nil {
		mu.SetImageURL(*s)
	}
	return mu
}

// SetCreatedAt sets the "created_at" field.
func (mu *MealUpdate) SetCreatedAt(t time.Time) *MealUpdate {
	mu.mutation.SetCreatedAt(t)
	return mu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mu *MealUpdate) SetNillableCreatedAt(t *time.Time) *MealUpdate {
	if t != nil {
		mu.SetCreatedAt(*t)
	}
	return mu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (mu *MealUpdate) SetUserID(id int) *MealUpdate {
	mu.mutation.SetUserID(id)
	return mu
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (mu *MealUpdate) SetNillableUserID(id *int) *MealUpdate {
	if id != nil {
		mu = mu.SetUserID(*id)
	}
	return mu
}

// SetUser sets the "user" edge to the User entity.
func (mu *MealUpdate) SetUser(u *User) *MealUpdate {
	return mu.SetUserID(u.ID)
}

// Mutation returns the MealMutation object of the builder.
func (mu *MealUpdate) Mutation() *MealMutation {
	return mu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (mu *MealUpdate) ClearUser() *MealUpdate {
	mu.mutation.ClearUser()
	return mu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MealUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, MealMutation](ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MealUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MealUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MealUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mu *MealUpdate) check() error {
	if v, ok := mu.mutation.MealType(); ok {
		if err := meal.MealTypeValidator(v); err != nil {
			return &ValidationError{Name: "meal_type", err: fmt.Errorf(`ent: validator failed for field "Meal.meal_type": %w`, err)}
		}
	}
	return nil
}

func (mu *MealUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := mu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(meal.Table, meal.Columns, sqlgraph.NewFieldSpec(meal.FieldID, field.TypeInt))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.MealType(); ok {
		_spec.SetField(meal.FieldMealType, field.TypeString, value)
	}
	if value, ok := mu.mutation.ImageURL(); ok {
		_spec.SetField(meal.FieldImageURL, field.TypeString, value)
	}
	if value, ok := mu.mutation.CreatedAt(); ok {
		_spec.SetField(meal.FieldCreatedAt, field.TypeTime, value)
	}
	if mu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   meal.UserTable,
			Columns: []string{meal.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   meal.UserTable,
			Columns: []string{meal.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{meal.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// MealUpdateOne is the builder for updating a single Meal entity.
type MealUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MealMutation
}

// SetMealType sets the "meal_type" field.
func (muo *MealUpdateOne) SetMealType(s string) *MealUpdateOne {
	muo.mutation.SetMealType(s)
	return muo
}

// SetImageURL sets the "image_url" field.
func (muo *MealUpdateOne) SetImageURL(s string) *MealUpdateOne {
	muo.mutation.SetImageURL(s)
	return muo
}

// SetNillableImageURL sets the "image_url" field if the given value is not nil.
func (muo *MealUpdateOne) SetNillableImageURL(s *string) *MealUpdateOne {
	if s != nil {
		muo.SetImageURL(*s)
	}
	return muo
}

// SetCreatedAt sets the "created_at" field.
func (muo *MealUpdateOne) SetCreatedAt(t time.Time) *MealUpdateOne {
	muo.mutation.SetCreatedAt(t)
	return muo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (muo *MealUpdateOne) SetNillableCreatedAt(t *time.Time) *MealUpdateOne {
	if t != nil {
		muo.SetCreatedAt(*t)
	}
	return muo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (muo *MealUpdateOne) SetUserID(id int) *MealUpdateOne {
	muo.mutation.SetUserID(id)
	return muo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (muo *MealUpdateOne) SetNillableUserID(id *int) *MealUpdateOne {
	if id != nil {
		muo = muo.SetUserID(*id)
	}
	return muo
}

// SetUser sets the "user" edge to the User entity.
func (muo *MealUpdateOne) SetUser(u *User) *MealUpdateOne {
	return muo.SetUserID(u.ID)
}

// Mutation returns the MealMutation object of the builder.
func (muo *MealUpdateOne) Mutation() *MealMutation {
	return muo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (muo *MealUpdateOne) ClearUser() *MealUpdateOne {
	muo.mutation.ClearUser()
	return muo
}

// Where appends a list predicates to the MealUpdate builder.
func (muo *MealUpdateOne) Where(ps ...predicate.Meal) *MealUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MealUpdateOne) Select(field string, fields ...string) *MealUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Meal entity.
func (muo *MealUpdateOne) Save(ctx context.Context) (*Meal, error) {
	return withHooks[*Meal, MealMutation](ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MealUpdateOne) SaveX(ctx context.Context) *Meal {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MealUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MealUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (muo *MealUpdateOne) check() error {
	if v, ok := muo.mutation.MealType(); ok {
		if err := meal.MealTypeValidator(v); err != nil {
			return &ValidationError{Name: "meal_type", err: fmt.Errorf(`ent: validator failed for field "Meal.meal_type": %w`, err)}
		}
	}
	return nil
}

func (muo *MealUpdateOne) sqlSave(ctx context.Context) (_node *Meal, err error) {
	if err := muo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(meal.Table, meal.Columns, sqlgraph.NewFieldSpec(meal.FieldID, field.TypeInt))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Meal.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, meal.FieldID)
		for _, f := range fields {
			if !meal.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != meal.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.MealType(); ok {
		_spec.SetField(meal.FieldMealType, field.TypeString, value)
	}
	if value, ok := muo.mutation.ImageURL(); ok {
		_spec.SetField(meal.FieldImageURL, field.TypeString, value)
	}
	if value, ok := muo.mutation.CreatedAt(); ok {
		_spec.SetField(meal.FieldCreatedAt, field.TypeTime, value)
	}
	if muo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   meal.UserTable,
			Columns: []string{meal.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   meal.UserTable,
			Columns: []string{meal.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Meal{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{meal.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}
